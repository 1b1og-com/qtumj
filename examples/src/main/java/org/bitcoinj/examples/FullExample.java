/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.bitcoinj.examples;

import java.io.File;
import org.bitcoinj.core.*;
import org.bitcoinj.kits.WalletAppKit;
import org.bitcoinj.params.MainNetParams;
import org.bitcoinj.params.TestNet3Params;
import org.bitcoinj.wallet.DeterministicSeed;
import org.bitcoinj.wallet.SendRequest;
import org.bitcoinj.wallet.Wallet;
import com.google.common.util.concurrent.MoreExecutors;

public class FullExample {

    public static final NetworkParameters TESTNET = TestNet3Params.get();
    public static final NetworkParameters MAINNET = MainNetParams.get();

    public static void main(String[] args) throws Exception {

        final NetworkParameters params = TESTNET;

        // Create mnemonic words
        String mnemonicWords = "orchard clay room pencil stock token student vicious ginger order lift delay";
        DeterministicSeed seed = null;
        seed = new DeterministicSeed(mnemonicWords, null, "", Utils.currentTimeSeconds());

        // should be changed
        File directory = new File(".");
        String prefix = "mywallet66";
        // create wallet & sync
        WalletAppKit kit = startKit(params, seed, directory, prefix);
        Address to = Address.fromString(TESTNET, "qP11J6Tb3kWwK9SfVmuT6Kn3FNFf2w4Yjq");
        // 2.56 QTUM
        Coin amount = Coin.valueOf(10000000);

        SendRequest req = SendRequest.to(to, amount);
        Address changeAddress = Address.fromString(TESTNET, "qWTk8cgFTQkypFPFL3kbSWgJCK2g9Xr666");
        // you need to specify the changeAddress if you don't want a brand new one.
        req.changeAddress = changeAddress;
        req.recipientsPayFees = false;

        // send the SendRequest
        sendCoinUsingKit(kit, req);
    }

    private static void sendCoinUsingKit(WalletAppKit kit, SendRequest req) throws Exception {
        Wallet.SendResult result = kit.wallet().sendCoins(req);
        System.out.println("sending tx: " + result.tx.getTxId());
        result.broadcastComplete.addListener(new Runnable() {
            @Override
            public void run() {
                System.out.println("sent tx: " + result.tx.getTxId());
            }
        }, MoreExecutors.directExecutor());

    }

    private static WalletAppKit startKit(NetworkParameters params, DeterministicSeed seed, File directory,
            String filePrefix) {
        WalletAppKit kit = new WalletAppKit(params, directory, filePrefix);
        // should be more elegant here
        File walletFile = new File(directory, filePrefix + ".wallet");
        if (!walletFile.exists()) {
            kit.restoreWalletFromSeed(seed);
        }
        kit.startAsync();
        kit.awaitRunning();
        System.out.println(kit.wallet().currentReceiveAddress());
        System.out.println(kit.wallet().currentChangeAddress());
        System.out.println(kit.wallet().getKeyChainSeed().getMnemonicString());
        return kit;
    }
    
}